---
title: "Tree-sitter R Grammar Playground"
vignette: >
  %\VignetteIndexEntry{Tree-sitter R Grammar Playground}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
format:
  html:
    include-in-header:
      - text: |
          <!-- External dependencies -->
          <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/r/r.min.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/clusterize.js/0.18.0/clusterize.min.js"></script>
          <script src="https://unpkg.com/web-tree-sitter@0.20.8"></script>
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/idea.min.css">
---

```{r}
#| label: setup
#| include: false
library(treesitter.r)
```

## Tree-sitter R Grammar Playground

This interactive playground allows you to write R code and see how the tree-sitter parser analyzes its syntax structure. The tree-sitter grammar for R enables precise parsing of R code for various applications like syntax highlighting, code navigation, and static analysis.

You can:

- Enter R code in the editor on the left
- See the parsed syntax tree on the right
- Click on tree nodes to highlight the corresponding code
- Use the query functionality to experiment with tree-sitter queries

```{=html}
<div class="playground">
  <div class="playground-header">
    <div class="playground-controls">
      <div class="control-item">
        <input id="logging-checkbox" type="checkbox">
        <label for="logging-checkbox">log</label>
      </div>

      <div class="control-item">
        <input id="anonymous-nodes-checkbox" type="checkbox">
        <label for="anonymous-nodes-checkbox">show anonymous nodes</label>
      </div>

      <div class="control-item">
        <input id="query-checkbox" type="checkbox">
        <label for="query-checkbox">query</label>
      </div>

      <div class="control-item">
        <input id="accessibility-checkbox" type="checkbox">
        <label for="accessibility-checkbox">accessibility</label>
      </div>

      <div class="control-item">
        <label for="update-time">parse time: </label>
        <span id="update-time"></span>
      </div>
    </div>
  </div>

  <div class="playground-body">
    <!-- Code editor section -->
    <div class="playground-section code-section">
      <div class="playground-section-header">R Code</div>
      <div id="code-container" class="playground-section-content"></div>
    </div>

    <!-- Syntax tree section -->
    <div class="playground-section tree-section">
      <div class="playground-section-header">Syntax Tree</div>
      <div id="tree-container" class="playground-section-content"></div>
    </div>
  </div>

  <!-- Query section -->
  <div class="playground-section query-section">
    <div class="playground-section-header">Query</div>
    <div id="query-container" class="playground-section-content"></div>
  </div>
</div>
```

```{=html}
<style>
/* Basic playground CSS */
:root {
  --primary-color: #0550ae;
  --bg-color: #ffffff;
  --text-color: #333333;
  --border-color: #cccccc;
  --highlight-color: #e3f2fd;
  --error-color: #f44336;
}

.playground {
  display: flex;
  flex-direction: column;
  height: 800px;
  min-height: 700px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  margin: 20px 0;
  border: 1px solid var(--border-color);
}

.playground-header {
  padding: 10px;
  font-size: 16px;
  font-weight: bold;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.playground-controls {
  display: flex;
  gap: 15px;
  align-items: center;
  font-size: 14px;
}

.control-item {
  display: flex;
  align-items: center;
  gap: 4px;
}

.playground-body {
  display: flex;
  flex: 1;
  overflow: hidden;
}

.playground-section {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  border-right: 1px solid var(--border-color);
}

.playground-section:last-child {
  border-right: none;
}

.playground-section-header {
  padding: 5px 10px;
  background-color: #f5f5f5;
  border-bottom: 1px solid var(--border-color);
  font-weight: bold;
  font-size: 14px;
}

.playground-section-content {
  flex: 1;
  overflow: auto;
  position: relative;
}

/* Code editor section */
.code-section {
  width: 50%;
}

/* Tree output section */
.tree-section {
  width: 50%;
}

/* Optional query section */
.query-section {
  width: 100%;
  height: 180px;
  flex: 0 0 auto;
  border-top: 1px solid var(--border-color);
  border-right: none;
}

/* Tree nodes */
.tree-row {
  padding: 2px 0;
  cursor: pointer;
  font-family: monospace;
  font-size: 12px;
  white-space: nowrap;
}

.tree-row:hover {
  background-color: var(--highlight-color);
}

.tree-row.cursor-highlighted {
  background-color: #e8f0fe;
  border-radius: 3px;
  font-weight: bold;
}

.field-name {
  color: #9a6700;
}

.node-type {
  color: #004d40;
}

.anonymous-node-type {
  color: #7d7d7d;
  font-style: italic;
}

.tree-node-position {
  color: #7d7d7d;
  font-size: 80%;
}

/* CodeMirror customizations */
.CodeMirror {
  height: 100%;
  font-family: monospace;
  font-size: 14px;
}

/* Error message */
.error-message {
  color: var(--error-color);
  padding: 10px;
  font-family: monospace;
  white-space: pre-wrap;
  font-size: 14px;
}

/* Query captures */
.capture-node {
  background-color: rgba(86, 156, 214, 0.2);
}

#update-time {
  font-family: monospace;
  min-width: 40px;
  display: inline-block;
}

/* Media queries for responsive layout */
@media (max-width: 768px) {
  .playground-body {
    flex-direction: column;
  }

  .code-section, .tree-section {
    width: 100%;
    height: 50%;
  }

  .playground-section {
    border-right: none;
    border-bottom: 1px solid var(--border-color);
  }

  .playground-section:last-child {
    border-bottom: none;
  }
}
</style>
```

```{=html}
<script>
// DOM elements we'll use
let codeEditor, tree, codeContainer, treeContainer, queryContainer, queryEditor;
// UI control elements
let loggingCheckbox, anonymousNodesCheckbox, queryCheckbox, accessibilityCheckbox, updateTimeSpan;
// Libraries we depend on
// The tree-sitter objects we'll use
let parser, rLanguage;

// Wait for page to load then initialize the playground
document.addEventListener('DOMContentLoaded', async function() {
  try {
    // Get the DOM elements
    codeContainer = document.getElementById('code-container');
    treeContainer = document.getElementById('tree-container');
    queryContainer = document.getElementById('query-container');
    loggingCheckbox = document.getElementById('logging-checkbox');
    anonymousNodesCheckbox = document.getElementById('anonymous-nodes-checkbox');
    queryCheckbox = document.getElementById('query-checkbox');
    accessibilityCheckbox = document.getElementById('accessibility-checkbox');
    updateTimeSpan = document.getElementById('update-time');

    // Initialize tree-sitter library with explicit path to web-tree-sitter WASM
    await TreeSitter.init({
      locateFile() {
        return 'https://unpkg.com/web-tree-sitter@0.20.8/tree-sitter.wasm';
      }
    });

    // Create parser
    parser = new TreeSitter();

    // Load the R language WASM file
    console.log('Web-tree-sitter initialized, loading R grammar...');

    // Use the same CDN approach as we do for the main tree-sitter WASM file
    console.log('Loading R grammar from CDN...');

    let rLanguage;
    try {
      // Use unpkg CDN to load the @davisvaughan/tree-sitter-r package's WASM file
      // This avoids path issues completely by using an absolute URL
      const wasmUrl = 'https://unpkg.com/@davisvaughan/tree-sitter-r@latest/tree-sitter-r.wasm';
      console.log('Attempting to load grammar from CDN:', wasmUrl);
      rLanguage = await TreeSitter.Language.load(wasmUrl);
      console.log('Successfully loaded R grammar from CDN');
    } catch (e) {
      console.error('Failed to load grammar from CDN:', e);

      // Fallback to local paths if CDN fails
      try {
        // Try relative paths as fallback
        const localWasmPath = '../playground/assets/tree-sitter-r.wasm';
        console.log('Attempting to load grammar locally:', localWasmPath);
        rLanguage = await TreeSitter.Language.load(localWasmPath);
        console.log('Successfully loaded R grammar from local path');
      } catch (e2) {
        console.error('All loading attempts failed:', e2);
        displayError('Failed to load R grammar. Check console for details.');
        throw e2;
      }
    }

    // Set language for parser
    parser.setLanguage(rLanguage);

    // Create code editor
    codeEditor = CodeMirror(codeContainer, {
      mode: 'r',
      lineNumbers: true,
      showCursorWhenSelecting: true,
      tabSize: 2,
      theme: 'default',
      value: 'foo <- function(\n  bar = 1,\n  baz = 2\n) {\n  list(bar, baz)\n}'
    });

    // Create query editor
    queryEditor = CodeMirror(queryContainer, {
      mode: 'text',
      lineNumbers: false,
      tabSize: 2,
      theme: 'default',
      placeholder: 'Enter a tree-sitter query...'
    });

    // Set up event handlers
    codeEditor.on('changes', debounce(parseCode, 250));
    codeEditor.on('cursorActivity', debounce(handleCursorMovement, 150));
    queryEditor.on('changes', debounce(runQuery, 250));

    // Set up checkbox event handlers
    loggingCheckbox.addEventListener('change', function() {
      console.log('Logging ' + (this.checked ? 'enabled' : 'disabled'));
    });

    anonymousNodesCheckbox.addEventListener('change', function() {
      parseCode(); // Re-render tree with/without anonymous nodes
    });

    queryCheckbox.addEventListener('change', function() {
      document.getElementById('query-container').style.visibility =
        this.checked ? 'visible' : 'hidden';
    });

    // Initial parse
    parseCode();
  } catch (error) {
    console.error('Error initializing playground:', error);
    displayError('Failed to initialize playground: ' + error.message);
  }
});

// Parse current code and update the tree
function parseCode() {
  try {
    const code = codeEditor.getValue();
    const startTime = performance.now();

    // Parse the code
    tree = parser.parse(code);

    // Calculate parse time
    const endTime = performance.now();
    const parseTime = endTime - startTime;
    if (updateTimeSpan) {
      updateTimeSpan.textContent = parseTime.toFixed(1) + 'ms';
    }

    // Render the tree
    renderTree(tree.rootNode);
  } catch (error) {
    console.error('Error parsing code:', error);
    displayError('Error parsing code: ' + error.message);
  }
}

// Run a query on the current code
function runQuery() {
  if (!tree) return;

  try {
    const queryString = queryEditor.getValue().trim();

    if (!queryString) {
      parseCode(); // Re-render without query highlighting
      return;
    }

    const language = parser.getLanguage();
    const query = language.query(queryString);
    const matches = query.matches(tree.rootNode);

    // Highlight matching nodes in the code
    highlightMatches(matches);

    // Render tree with highlighting
    renderTree(tree.rootNode, matches);
  } catch (error) {
    console.error('Error running query:', error);
    displayError('Error in query: ' + error.message);
  }
}

function highlightMatches(matches) {
  // Clear previous highlights
  codeEditor.getAllMarks().forEach(m => m.clear());

  // Add new highlights
  matches.forEach(match => {
    match.captures.forEach(capture => {
      const { node } = capture;
      const start = { line: node.startPosition.row, ch: node.startPosition.column };
      const end = { line: node.endPosition.row, ch: node.endPosition.column };

      codeEditor.markText(start, end, {
        className: `capture-${capture.name || 'node'}`
      });
    });
  });
}

// Render the syntax tree
function renderTree(rootNode, matches = []) {
  if (!treeContainer) return;

  treeContainer.innerHTML = '';

  const cursor = tree.walk();

  // Create a document fragment for better performance
  const fragment = document.createDocumentFragment();

  function renderNode(depth = 0) {
    // Check if this node is highlighted by a query match
    const isHighlighted = matches.some(match =>
      match.captures.some(capture => capture.node.id === cursor.currentNode.id)
    );

    // Skip anonymous nodes if checkbox is not checked
    if (!cursor.nodeIsNamed && !anonymousNodesCheckbox.checked) {
      if (cursor.gotoFirstChild()) {
        do {
          renderNode(depth);
        } while (cursor.gotoNextSibling());
        cursor.gotoParent();
      }
      return;
    }

    const displayName = cursor.nodeIsNamed ? cursor.nodeType : `"${cursor.nodeType}"`;
    const start = cursor.startPosition;
    const end = cursor.endPosition;

    const row = document.createElement('div');
    row.className = isHighlighted ? 'tree-row highlighted' : 'tree-row';
    row.style.marginLeft = (depth * 12) + 'px';
    row.dataset.startRow = start.row;
    row.dataset.startColumn = start.column;
    row.dataset.endRow = end.row;
    row.dataset.endColumn = end.column;
    row.dataset.id = cursor.currentNode.id;

    const nodeType = document.createElement('span');
    nodeType.className = cursor.nodeIsNamed ? 'node-type' : 'anonymous-node-type';
    nodeType.textContent = displayName;
    row.appendChild(nodeType);

    const position = document.createElement('span');
    position.className = 'tree-node-position';
    position.textContent = ` [${start.row},${start.column} - ${end.row},${end.column}]`;
    row.appendChild(position);

    // Add event listener to highlight the corresponding code when clicked
    row.addEventListener('click', () => {
      codeEditor.focus();
      codeEditor.setSelection(
        { line: start.row, ch: start.column },
        { line: end.row, ch: end.column }
      );
    });

    fragment.appendChild(row);

    if (cursor.gotoFirstChild()) {
      do {
        renderNode(depth + 1);
      } while (cursor.gotoNextSibling());
      cursor.gotoParent();
    }
  }

  renderNode();
  treeContainer.appendChild(fragment);
}

// Helper function to display errors
function displayError(message) {
  const errorDiv = document.createElement('div');
  errorDiv.className = 'error-message';
  errorDiv.textContent = message;

  treeContainer.innerHTML = '';
  treeContainer.appendChild(errorDiv);
}

// Debounce function to limit how often a function is called
function debounce(func, wait) {
  let timeout;
  return function() {
    const context = this;
    const args = arguments;
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(context, args), wait);
  };
}

// Handle cursor movement to highlight corresponding tree node
function handleCursorMovement() {
  if (!tree) return;

  const cursor = codeEditor.getCursor();
  const lineNumber = cursor.line;
  const column = cursor.ch;

  // Remove any existing highlights
  const highlighted = treeContainer.querySelectorAll('.tree-row.cursor-highlighted');
  highlighted.forEach(el => el.classList.remove('cursor-highlighted'));

  // Find all nodes that contain this position
  const treeRows = treeContainer.querySelectorAll('.tree-row');
  let bestMatch = null;
  let smallestSize = Infinity;

  treeRows.forEach(row => {
    const startRow = parseInt(row.dataset.startRow, 10);
    const startCol = parseInt(row.dataset.startColumn, 10);
    const endRow = parseInt(row.dataset.endRow, 10);
    const endCol = parseInt(row.dataset.endColumn, 10);

    // Check if position is within this node
    const containsPosition =
      (startRow < lineNumber || (startRow === lineNumber && startCol <= column)) &&
      (endRow > lineNumber || (endRow === lineNumber && endCol >= column));

    if (containsPosition) {
      // Calculate size of node (rough estimate by characters)
      const size = (endRow - startRow) * 1000 + (endCol - startCol);
      if (size < smallestSize) {
        bestMatch = row;
        smallestSize = size;
      }
    }
  });

  // Highlight the smallest node that contains the cursor
  if (bestMatch) {
    bestMatch.classList.add('cursor-highlighted');
    // Ensure it's visible in the viewport
    bestMatch.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
}
</script>
```

## How to Use the Playground

### Basic Usage

1. Type or paste R code in the left panel
2. View the syntax tree in the right panel
3. Click on a node in the tree to highlight the corresponding code
4. Place your cursor in the code to highlight the corresponding node in the tree

### Advanced Features

#### Query Mode

Toggle on the "query" checkbox to use tree-sitter queries. This allows you to write pattern-matching expressions to find nodes in your code.

Example queries:

```
(function_definition) @function
```

This will match all function definitions in your code.

```
(binary (identifier) @left_id (#eq? @left_id "x"))
```

This will match binary expressions where the left operand is the identifier "x".

#### Anonymous Nodes

Toggle on "show anonymous nodes" to display all nodes in the tree, including unnamed ones like operators and punctuation.

## About Tree-sitter

[Tree-sitter](https://tree-sitter.github.io/tree-sitter/) is a parser generator tool and incremental parsing library. It can build a concrete syntax tree for source files and efficiently update the syntax tree as the source file is edited.

The tree-sitter-r grammar enables precise parsing of R code for various applications like syntax highlighting, code navigation, and static analysis.
